# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Translation listener alias
    Gedmo\Translatable\TranslatableListener: '@stof_doctrine_extensions.listener.translatable'

    # Security
    database.security.role_hierarchy_voter:
        class: App\Security\RoleHierarchyVoter
        tags:
            - { name: security.voter }
    authentication.handler.login_success_handler:
        class: App\Security\LoginSuccessHandler
        arguments: ['@router', '@security.authorization_checker']
    back_office_user.provider:
        class: App\Security\BackOfficeUserProvider
    api_user.provider:
        class: App\Security\ApiUserProvider
    basic_credentials.extractor:
        class: Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor
        arguments: [ 'Basic', 'Authorization' ]
    username_password.authenticator:
        class: App\Security\UsernamePasswordAuthenticator
        arguments: ['@basic_credentials.extractor']
    jwt.authenticator:
        class: App\Security\JwtAuthenticator

    # Serialization
    App\EventSubscriber\PathSerializerEventSubscriber:
        tags:
            - { name: jms_serializer.event_subscriber }

    # WebService consumers based on guzzle
    App\Services\AladhanApiService:
        arguments:
            - '@eight_points_guzzle.client.api_aladhan'
            - '@jms_serializer'
            - App\DTO\AladhanApi\AladhanResponse
            - '@translator.data_collector'
            - "@=service('request_stack').getCurrentRequest().getLocale()"
    App\Services\YahooWeatherApiService:
        arguments:
            - '@eight_points_guzzle.client.api_weather_yahoo'
            - '@jms_serializer'
            - App\DTO\YahooWeatherApi\YahooResponse
    App\Services\PharmacieApiService:
        arguments:
            - '@eight_points_guzzle.client.api_pharmacie'
            - '@jms_serializer'
            - App\DTO\PharmacyApi\PharmacyResponse
    App\Services\YahooLocatorApiService:
        arguments:
            - '@eight_points_guzzle.client.api_locator_yahoo'
            - '@jms_serializer'
            - array
            - "@=service('request_stack').getCurrentRequest().getLocale()"
    App\Services\SmsApiService:
        arguments:
            - '@eight_points_guzzle.client.api_sms'
            - '@jms_serializer'
            - array
    App\Services\DevisAutoApiService:
            arguments:
                - '@eight_points_guzzle.client.api_devis_auto'
                - '@jms_serializer'
                - App\DTO\Devis\AutoResponse
    App\Services\DevisAutoMesureApiService:
                arguments:
                    - '@eight_points_guzzle.client.api_devis_auto_mesure'
                    - '@jms_serializer'
                    - App\DTO\Devis\AutoMesureResponse
    App\Services\DevisHabitationApiService:
                    arguments:
                        - '@eight_points_guzzle.client.api_devis_habitation'
                        - '@jms_serializer'
                        - App\DTO\Devis\MrhResponse
    App\Services\ContratApiService:
                arguments:
                    - '@eight_points_guzzle.client.api_add_contrat'
                    - '@jms_serializer'
                    - array


    # Exception normalizers
    app.normalizer.not_found_http_exception:
            class: App\Normalizer\NotFoundHttpExceptionNormalizer
            arguments:
                - { type: 'Symfony\Component\HttpKernel\Exception\NotFoundHttpException' }
            tags:
                - { name: app.normalizer }
    app.normalizer.constraint_violation_exception:
            class: App\Normalizer\ConstraintViolationExceptionNormalizer
            arguments:
                - [ 'App\Exception\ConstraintViolationException', 'FOS\RestBundle\Exception\InvalidParameterException' ]
            tags:
                - { name: app.normalizer }
    app.normalizer.missing_required_file_exception:
            class: App\Normalizer\MissingRequiredFileExceptionNormalizer
            arguments:
                - [ 'App\Exception\MissingRequiredFileException' ]
            tags:
                - { name: app.normalizer }
    app.normalizer.pre_declaration_creation_failure_exception:
            class: App\Normalizer\PreDeclarationCreationFailureExceptionNormalizer
            arguments:
                - [ 'App\Exception\PreDeclarationCreationFailureException' ]
            tags:
                - { name: app.normalizer }
    app.normalizer.jwt_failure_exception:
            class: App\Normalizer\JWTFailureExceptionNormalizer
            arguments:
                - [ 'Lexik\Bundle\JWTAuthenticationBundle\Exception\JWTFailureException' ]
            tags:
                - { name: app.normalizer }